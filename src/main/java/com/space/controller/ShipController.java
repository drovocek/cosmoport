package com.space.controller;

import com.space.model.Ship;
import com.space.repository.ShipRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class ShipController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ShipRepository shipRepository;

//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        Ship newShip = new Ship();
//        newShip.setName(name);
//        newShip.setEmail(email);
//        shipRepository.save(newShip);
//        return "Saved";
//    }
    //GET /rest/ships?name=Orion III&planet=Mars&shipType=MERCHANT&after=NaN&before=NaN
    // &minSpeed=0.81&maxSpeed=0.83
    // &minCrewSize=616&maxCrewSize=618
    // &minRating=1.3&maxRating=1.4
    // &pageNumber=0
    // &pageSize=3
    // &order=ID
//    @GetMapping(path="/ships")
//    public @ResponseBody Iterable<Ship> getAllUsers(
//    /*String name,?name=Orion III*/ @RequestParam(name = "name") String name,
//    /*String planet,&planet=Mars*/ @RequestParam(name = "planet") String planet,
//    /*ShipType shipType,&shipType=MERCHANT*/ @RequestParam(name = "shipType") String shipType,
//    /*Long after,&after=NaN*/ @RequestParam(name = "after") String after,
//    /*Long before,&before=NaN*/ @RequestParam(name = "before") String before,
//    /*Boolean isUsed,???*/ @RequestParam(name = "isUsed") String isUsed,
//    /*Double minSpeed,&minSpeed*/ @RequestParam(name = "minSpeed") String minSpeed,
//    /*Double maxSpeed,&maxSpeed=0.83*/ @RequestParam(name = "maxSpeed") String maxSpeed,
//    /*Integer minCrewSize,*/ @RequestParam(name = "minCrewSize") String minCrewSize,
//    /*Integer maxCrewSize,*/ @RequestParam(name = "maxCrewSize") String maxCrewSize,
//    /*Double minRating,&minCrewSize=616*/ @RequestParam(name = "minRating") String minRating,
//    /*Double maxRating,&maxCrewSize=618*/ @RequestParam(name = "maxRating") String maxRating,
//    /*Integer pageNumber, &pageNumber=0*/ @RequestParam(name = "pageNumber") String pageNumber,
//    /*Integer pageSize&pageSize*/ @RequestParam(name = "pageSize") String pageSize,
//    /*ShipOrder order, &order=ID*/ @RequestParam(name = "order") String order
//    ) {
//        // This returns a JSON or XML with the users
//
//
//        return shipRepository.findAll();
//    }


    @GetMapping(path = "/rest/ships")
    public @ResponseBody
    Iterable<Ship> getAllShips(
            /*Integer pageNumber, &pageNumber=0*/ @RequestParam(name = "pageNumber",required = false) String pageNumber,
            /*Integer pageSize&pageSize*/ @RequestParam(name = "pageSize",required = false) String pageSize,
            /*ShipOrder order, &order=ID*/ @RequestParam(name = "order",required = false) String order
    )
    {
        // This returns a JSON or XML with the users
        if(pageNumber == null || pageSize == null || order == null){
            pageNumber = "0";
            pageSize = "3";
            order ="ID";
        }
        ArrayList<Ship> allShips = (ArrayList<Ship>) shipRepository.findAll();
        ShipOrder shipOrder = ShipOrder.valueOf(order);
        Function<ShipOrder, Comparator<Ship>> orderComp = x -> {
            if (x == ShipOrder.SPEED) return Comparator.comparing(Ship::getSpeed);
            else if (x == ShipOrder.DATE) return Comparator.comparing(Ship::getProdDate);
            else if (x == ShipOrder.ID) return Comparator.comparing(Ship::getId);
            return Comparator.comparing(Ship::getRating);
        };

        Integer pNumber = Integer.parseInt(pageNumber);
        Integer pSize = Integer.parseInt(pageSize);
        ArrayList<Ship> responce = allShips.stream()
                .sorted(orderComp.apply(shipOrder))
                .skip(pNumber*pSize)
                .limit(pSize)
                .collect(Collectors.toCollection(ArrayList::new));
//        System.out.println("shipOrder: " + shipOrder);
//        System.out.println("pageNumber: " + pNumber);
//        System.out.println("pageSize: " + pSize);
//        System.out.println("responce: " + responce);

        return responce;
    }

    @GetMapping(path = "/rest/ships/count")
    public @ResponseBody
    long getCountShips() {
        // This returns a JSON or XML with the users
        return shipRepository.count();
    }
}